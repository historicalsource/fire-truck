	.TITLE	HOOKER:  HOOK AND LADDER
	.ASECT
	.BLKB 40		;ALPHA-NUMBERICS
TROT:	.BLKB 1
JAKFLG:	.BLKB 1
TPSAV:	.BLKB 1
THSAV:	.BLKB 1
TVSAV:	.BLKB 1
TREG:	.BLKB 1
PRTCD:	.BLKB 2
HISCR:	.BLKB 1
ZERO:	.BLKB 1
ADDSAV:	.BLKB 2
TNETME:	.BLKB 1
NTEMP:	.BLKB 2
ITEMP:	.BLKB 2
TKFG:	.BLKB 1		;SAVE AREA FOR LATCHED OUTPUTS
RANOBJ:	.BLKB 1		;RANDOM SPECIAL OBJ FOR ATTRACT
RANDOM:	.BLKB 2		;(2) RANDOM NUMBER
SPECN:	.BLKB 1		;MSB OF ADDRESS OF SELECTED MAPS SPECIAL TABLE
MAPN:	.BLKB 1		;MSB OF ADDRESS OF SELECTED MAP
XTDSCR:	.BLKB 1
MODE:	.BLKB 1		;BIT0=HEAD,BIT1=TAIL,BIT2=EX PLAY
FUEL:	.BLKB 1
FUELTM:	.BLKB 1
TMESAV:	.BLKB 1
SCOREA:	.BLKB 1
SPCLOC:	.BLKB 1
SPECCD:	.BLKB 1
SPCOBJ:	.BLKB 1
FRMCNT:	.BLKB 2			;(2)
MOLPNT:	.BLKB 2			;(2)
TEMP:	.BLKB 2			;(2)
CARMOL:	.BLKB 1
ROTREG:	.BLKB 1
VMAX:	.BLKB 1
SCRCNT: .BLKB 1
CRSCNT:	.BLKB 1
	.BLKB 1		;LEADING ZERO FOR HPOSM
HPOSM:	.BLKB 1		;(2)
	.BLKB 1		;LEADING ZERO FOR VPOSM
VPOSM:	.BLKB 1		;(2)
PHPOUT:	.BLKB 1
PVPOUT:	.BLKB 1
VEL:	.BLKB 1
VEL8:	.BLKB 1
;START OF INDEXED VARIABLES
MOLXH:	.BLKB 1
MOLXV:	.BLKB 1
HCRPOS:	.BLKB 2
VCRPOS:	.BLKB 2
HPOS:	.BLKB 1			;(2)
VPOS:	.BLKB 1			;(2)
	.BLKB 2			;HPOS+2 & VPOS+2
DIREC:  .BLKB 1
VELX:	.BLKB 1
VELY:	.BLKB 1
	.BLKB 2			;2 DUMMY BYTES FOR MOLXH & V
	.BLKB 4			;4 DUMMY BYTES FOR H & VCRPOS WHEN INDEX=13
HAUTO:	.BLKB 1
VAUTO:	.BLKB 1
	.BLKB 2			;HAUTO+2 & AUTO+2
AUTDIR: .BLKB 1   		;AUTODRIVE VARIABLES ARE 13
AVELX:	.BLKB 1			;BYTES ABOVE NORMAL, MOTION VARIABLES
AVELY:	.BLKB 1
CELLOC:	.BLKB 1
CELLID:	.BLKB 1
HPNT:	.BLKB 1
VPNT:	.BLKB 1
STRSAV:	.BLKB 1
SAVE:	.BLKB 2			;(2)
MPOS:	.BLKB 1
ROTOUT:	.BLKB 1
CELLX:	.BLKB 1
VOUT:	.BLKB 16.		;(16)
HOUT:	.BLKB 16.		;(16)
CRSLIN:	.BLKB 1
CRSHSV:	.BLKB 1
HPFAC:	.BLKB 2
VPFAC:	.BLKB 2
SCNPNT:	.BLKB 2			;2
STEP:	.BLKB 1
XSAV:	.BLKB 2		;(2)
SKDSAV:	.BLKB 1
PRESLM:	.BLKB 1
COINDB:	.BLKB 2
PSTSLM: .BLKB 4
CNSTAT:	.BLKB 2
COINS:	.BLKB 1
COST:	.BLKB 1
CREDIT:	.BLKB 1
DBREG:	.BLKB 1
FRZTME:	.BLKB 1
BELTME: .BLKB 1
SIFREQ:	.BLKB 1
SIPER:	.BLKB 1
ARRLOK: .BLKB 1
DIST:	.BLKB 1
SCAN:	.BLKB 2
STEPDB:	.BLKB 1
TSTCNT:	.BLKB 2
OPT	=2
;OPT 0=WRWRD, OPT 1=PC DEV, OPT 2=PC ALONE
	.=30000
PLFDRM	=04000
PLYFLD	=04000
AN	=00000
MAP	=^H2000
SPCTBL	=^H2200
CELTBL	=^H2400
ROM1	=020000
ROM2	=024000
ROM3	=030000
ROM4	=034000
ROM5	=040000
CHKSM1	=0
CHKSM2	=0
CHKSM3	=0
CHKSM4	=0
	.IF EQ,OPT-1
	.=^H9000
	.ENDC
CRSHIN	=014006		;BIT 7 TRUE = CRASH
CRSHRS	=010110		;WRITE TO CLEAR CRASH LATCH
STRFLG	=014002		;BIT 7 FALSE = STEER
STRRST	=010240
SKIDIN	=014006
SKDRST	=010140
TMEOPT	=016001
GASIN	=014001
SWITCH	=014000
HIRST	=014004
TKSEL	=014003
START2	=014002
START0	=014000
CABIN	=014006
DIHOLD	=014007
COINSW	=014004
CARROT	=010200
PVP	=010000
PHP	=010040
WTCHDG	=010300
ARROFF	=010340
MOTSND	=012000
CSHSND	=012040
SKDSND	=012100
SLAMSW	=014005
STEPSW	=014007
BELLSW  =014004
TKFGOT  =012300
TREE	=100
STRIPE  =5
BLANK	=4
CNMSK1	=^B01111111
CNMSK2	=^B10000000
PROT	=064645
TSTSW	=014007
TNEOUT	=012340
VBLANK	=014005
COINOP	=016000
XPOPT	=016002
MESOPT	=016000
LOC0	=AN+20
LOC1	=AN+0
TOUT	=012240
THPOS	=012140
TVPOS	=012200
	.MACRO	.WAIT
	.LIST	MEB
	.IF	EQ,OPT-2
	SWI
	.IFF
	JMP	WAIT
	.ENDC
	.NLIST	MEB
	.ENDM
	.MACRO .MSG,STRING
	XC=0			;COUNTER=0,1,OR 2
	XS=100000		;SENTINEL- FIRST WORD HAS BIT 15=1
	B1='H			;BREAKS IN CHARACTERS ET
	B2='J
	B3='O
	B4='Q
	B5='V
	B6='W
;COMPUTE THE CODE FOR EACH CHARACTER
	.IRPC XL,STRING
	XM=''XL-67
	.IIF LE,''XL-71,XM=''XL-60	;NUMBER
	.IIF EQ,''XL-100,XM=37	;BLANK @
	.IIF EQ,''XL-56,XM=36	;PERIOD
	.IIF GE,''XL-B1,XM=XM-1
	.IIF GE,''XL-B2,XM=XM-1
	.IIF GE,''XL-B3,XM=XM-1
	.IIF GE,''XL-B4,XM=XM-1
	.IIF GE,''XL-B5,XM=XM-1
	.IIF GE,''XL-B6,XM=XM-1
;PACK 3 INTO A WORD
	.IF EQ,XC
	XD=XM*2000
	XC=1
	.IFF
	.IF EQ,XC-1
	XD=XD+<XM*40>
	XC=2
	.IFF
	.WORD XD+XM!XS
	XC=0
	XS=0
	.ENDC
	.ENDC
	.ENDR
	.ENDM
NOTEST:
	.IF	LE,OPT-1
	SEI
	LDS	I,377
	.ENDC
2$:	LDX	I,277
	CLRA
1$:	STAA	X,0
	DEX
	BNE	1$
	CLR	E,MODE		;SET TO ATTRACT
	LDAA	I,006		;INITIALIZE HI SCORE AT 60
	STAA	D,HISCR
	JSR	E,INIT
ATTRAC:	LDX	I,PROT		;A "RANDOM" NUMBER TO SHOW WE'RE OK
	STX	D,PRTCD
	LDAA	I,273		;ATTRACT ON
	STAA	D,TKFG
6$:	LDAA	I,010
	STAA	D,PVPOUT
	CLRA
	STAA	D,VPOS
	STAA	D,VPOSM
	STAA	D,SPECN
	STAA	D,FRMCNT+1
	STAA	D,MOLXV
	STAA	E,MOTSND
	LDAA	I,RANOBJ
	STAA	D,CELLOC
	JSR	E,OPTN
	LDAA	D,PHPOUT
	ADDA	I,02
	STAA	D,PHPOUT
	LDAA	D,HPOS+2		;INCREMENT LOCATION
	ADDA	I,040
	STAA	D,HPOS+2
	BCC	2$
	LDAA	I,201
	STAA	D,MOLXH
	LDAA	D,HPOS
	INCA
	STAA	D,HPOS
	ADDA	I,017
	STAA	D,HPNT
	ANDA	I,017
	STAA	D,HPOSM
	STAA	D,HPFAC+1
	BNE	3$
	JSR	E,RANNUM			;RANDOM NUMBER IN A
	ANDA	I,007
	STAA	D,TEMP+1
	LDAA	I,ATTMAP&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,ATTMAP&377			;C(A)=RANDOM CELL
	STAA	D,CELLID
	LDAA	D,RANDOM
	ANDA	I,007
	STAA	D,TEMP+1
	LDAA	I,ATTSPC&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,ATTSPC&377		;C(A)=LOW PART OF SPEC CODE
	LDAB	D,RANDOM+1
	ANDB	I,060			;ADD IN HIGH PART
	ABA
	STAA	D,RANOBJ
	CLR	E,CELLX
3$:	LDAB	D,CELLID
	JSR	E,RCLIDM
	JSR	E,CONTH
2$:	JSR	LAMP
	LDAA	D,FRMCNT
	BITA	I,01		;EVERY OTHER FRAME SHIFT POST-SLAM REGISTERS
	BEQ	7$
	LSR	E,PSTSLM
	ROR	E,PSTSLM+2
	LSR	E,PSTSLM+1
	ROR	E,PSTSLM+3
7$:	STAA	E,WTCHDG
	CLI
4$:	WAI
	ROR	E,TSTSW			;TEST?
	BCC	1$
	JMP	TEST
1$:	CMPA	D,FRMCNT		;IF FRMCNT CHANGED, INT WAS NMI
	BEQ	4$
	LDAB	D,MODE
	BNE	5$			;BACK TO ATTRACT LOOP
	JMP	6$
5$:	ANDB	I,177			;ELIMINATE FREEZE
	CMPB	I,02			;BOTH PLAYERS STARTED?
	BHI	8$			;IN THE GAME
	ROL	CABIN			;IF SINGLE CABINET, INTO GAME
	BPL	GAME
	DEC	E,FRZTME
	BNE	2$
	BEQ 	GAME
8$:	ROL	CABIN
	BMI	GAME
	LDAB	I,01			;BOTH?! SWITCH TO ONE
GAME:	SEI
	STAB	D,MODE
	CLR	FRZTME
	JSR	E,RERITE		;WRITE A FRESH ROAD
	JSR	E,INIT
	LDAA	D,TKFG
	ANDA	I,357		;ATTRACT OFF
	STAA	D,TKFG
	LDAA	I,050		;RING BELL
	STAA	D,BELTME
GO:	LDAA	D,MODE			;MAKE SURE WE SHOULD BE HERE
	DECA				;VALID IF A=0,1,2 AFTER DECA
	ANDA	I,^B11111011		;EX PLAY BIT IS DON'T CARE
	CMPA	I,02
	BLS	JAK
	JMP	PWRON
JAK:	LDAB	D,CRSCNT		;DIFFERENCE GT 45 DEG
	BEQ	8$
	JMP	CARPIC		;NO ROTATION CHANGE DURING A CRASH
8$:	CLRB
	STAB	D,JAKFLG		;0=NO JAK-NIFE, 1=HEAD RIGHT, 2=HEAD LEFT
	DECB
	STAB	E,CSHSND		;CLEAR CRASH SOUND
	NEGB				;B=1
	LDAA	D,ROTREG
	SUBA	D,TROT
	BPL	11$
	NEGA
	INCB
11$:	CMPA	I,030
	BLS	12$
	STAB	D,JAKFLG		;UPDATE FLAG
	JSR	E,RANNUM
	ORAA	I,200			;SET BIT 7
	STAA	E,CSHSND
;
;FRONT STEERING ROUTINE
;
12$:	LDAA	D,MODE			;LOOK AT FRONT STEER IF B0=1
	RORA
	BCS	7$
;IN FRONT AUTO DRIVE, NUDGE ROTREG TOWARD AUTDIR
	ROR	E,SKIDIN		;SKIP IF IN A SKID
	BCS	5$
	LDAA	D,JAKFLG
	BEQ	2$		;OK IF NOT JAKNIFED
	LDAA	D,FRMCNT	;OTHERWISE, ONLY EVERY 32ND FRAME
	ANDA	I,037
	BNE	5$
2$:	LDAB	I,02		;INITIAL INCREMENT
	LDAA	D,AUTDIR
	SUBA	D,ROTREG	;GET DIFFERENCE
	BEQ	5$		;IF NO DIFFERENCE, ON TO JACK-KNIFE
	BPL 	21$
	NEGA			;MAKE POSITIVE
	NEGB
21$:	CMPA	I,040
	BLT	3$		;BIG DIFFERENCE?
	EORB	I,010		;INCREASE INCREMENT FRM 2 TO 10
3$:	CMPA	I,001		;IF WITHIN ONE, REDUCE INC. TO 1
	BNE	22$
	ASRB
22$:	ASLB			;DIRECTION INTO CARRY
	ROL	E,STRSAV	;SAVE DIRECTION IN BIT 0
	ASRB			;RESTORE B
	BRA	1$		;ON TO JACK-KNIFE
7$:	LDAA	E,STRFLG		;TEST FOR STEER
	BMI	5$			;NO STEER, GO TO PICTURE UPDATE
	STAA	D,STRSAV		;SAVE DIRECTION FOR SKID ROUTINE
	LDAB	D,VEL8			;STEER INCREMENT=1,2,2,3
	BEQ	6$			;NO MOTION IF STILL
	LSRB
	LSRB
	LSRB
	LSRB
	ADCB	I,01
6$:	RORA				;DIRECTION TO CARRY
	BCC	1$
	NEGB
1$:	LDAA	D,ROTREG		;UPDATE ROTATION
	ABA
	STAA	D,ROTREG
	LDAA	D,JAKFLG		;TEST FOR JACK-KNIFE
	BEQ	5$
	EORA	D,STRSAV		;JAK-NIFE IF STEER DIR .EOR. JAK DIR=1
	RORA				;BIT 0 TO CARRY
	BCC	5$
	LDAA	D,TREG			;UPDATE TAIL ROTATION
	ABA
	STAA	D,TREG
	ADDB	D,TROT			;FIX DISPLACEMENT AT 45 DEGREES
	STAB	D,TROT
;
;TAIL STEERING ROUTINE
;
5$:	LDAA	D,MODE		;IF REAR PLAYER, LOOK AT STEERING
	BITA	I,02
	BNE	10$
	LDAA	D,FRMCNT	;UPDATE EVERY 8 FRAMES
	BITA	I,007
	BNE	18$
	LDAB	D,ROTREG	;AUTO-TAIL
	SUBB	D,TREG		;NUDGE TAIL TOWARD HEAD
	ASRB
	ADCB	I,0		;ROUND UP
	LDAA	D,CARMOL	;IF OFF CENTER, ONLY NUDGE WITHIN 0B COUNTS
	CMPA	I,STRIPE
	BEQ	4$
	TBA			;HOW CLOSE?
	BPL	17$
	NEGA			;MAKE POSITIVE
17$:	CMPA	I,013
	BLS	18$
	BHI	4$
10$:	LDX	I,STRFLG		;D7=0?
;IN SINGLE CABINET, READ FRONT WHEEL. IN DOUBLE
;CABINET READ REAR WHEEL
	ROL	CABIN
	BPL	30$
	INX
30$:	LDAA	X,0
	BMI	18$
	LDAB	D,VEL8			;STEERING PROPORTIONAL TO VELOCITY
	BEQ	18$
	LSRB
	LSRB
	LSRB
	BNE	14$
	INCB
14$:	RORA				;DIRECTION INTO CARRY
	BCC	4$
	NEGB				;NEGATE IF TURNING LEFT
4$:	ADDB	D,TREG
	STAB	D,TREG			;TIRE POSITION
18$:				;DONE
CARPIC:	STAA	E,STRRST		;CLEAR LATCHES
	LDAB	D,ROTREG		;CONVERT TO 1 OF 24
	JSR	CABROT			;COMPUTE PICTURE
	STAA	D,ROTOUT		;LOAD ROTATION OUTPUT BUFFER
	LDAB	I,01			;INCREMENT FOR PICTURE CATCH-UP
	LDAA	I,03
	BITA	D,FRMCNT		;AT HIGH SPEED, ADD 2 ON 3 OF 4 FRAMES
	BEQ 	10$
	LDAA	D,VEL
	BPL 	10$
	INCB
10$:	LDAA	D,TREG			;GET LAG
	SUBA	D,TROT			;PICTURE SHOULD LAG ROTATION
	BEQ	19$
	BPL	16$
	NEGB				;MAKE DIFFERENCE POSITIVE
	NEGA				;MAKE CORRECTION NEGATIVE
16$:	CMPA	I,02			;2 IS CLOSE ENOUGH
	BCS	18$			;CARRY SET BY COMPARE
	LDAA	D,TROT
	ABA				;UPDATE
	STAA	D,TROT
18$:	LDAA	D,JAKFLG		;JACK-KNIFED?
	BEQ	19$
	ASLB				;CARRY=SIGN B=DIRECTION OF LAG
	RORA				;V SET BY DIR OF LAG .EOR. DIR OF JAKNIFE 
	BVS	19$
	ASRB				;RESTORE CONSTANT
	ADDB	D,ROTREG		;ADD IT IN
	STAB	D,ROTREG
19$:	LDAB	D,TROT
	JSR	TLROT			;COMPUTE TAIL PICTURE
	STAA	D,TPSAV
	LDAB	I,130
	BITA 	I,020
	BEQ	3$
	COMB
	SUBB	I,40
3$:	ANDA	I,007			;GET INDEX INTO POSITION TABLE
	STAA	D,TEMP+1
	LDAA	I,CIRTBL&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	SUBB	X,CIRTBL&377		;SUBTRACT OFFSET VERTICAL
	STAB	D,TVSAV
	LDAA	D,TPSAV
	LDAB	I,213		;TAIL HORIZONTAL POSITION
	BITA	I,010
	BNE	4$
	COMB
	SUBB	I,40
4$:	SUBB	X,CIRTBL&377+7		;SUBTRACT OFFSET HORIZ.
	STAB	D,THSAV
CRASH:  ROL	E,CRSHIN		;CRASH TO CARRY (1=CRASH)
	ROR	E,CRSHSV		;INTO B7 OF SAVE
	BPL 	CREND			;NO CRASH? DONE
	LDAA	D,CRSHSV		;LOOK FOR 1000 0000
	DECA				;V SET IF A=1000 0000
	BVS	CRSH
	LDAA	D,CRSCNT		;COUNT NOT=0, CRASH
	BEQ	CREND
CRSH:	CLRA				;STOP CAR
	STAA	D,VEL
	LDAA	D,CRSCNT
	STAA	E,CSHSND		;OUTPUT CRASH SOUND
	ADDA	I,004			;INCREMENT CRASH SEQUENCE
	STAA	D,CRSCNT
	BNE	2$			;SKIP EXCEPT FINAL TIME
	LDAB	D,VMAX			;DECREASE TOP SPEED
	SUBB	I,040
	STAB	D,VMAX
2$:	BITA	I,017			;BLINK VIDEO
	BNE	3$
	LDAB	D,TKFG
	EORB	I,004
	STAB	D,TKFG
3$:	LDAB	I,013
	BITA	I,010
	BEQ	1$
	NEGB
1$:	LDAA	D,ROTREG		;WAG HEAD
	ABA
	STAA	D,ROTREG
	LDAA	D,TROT			;WAG TAIL
	SBA
	STAA	D,TROT
	STAA	D,TREG		;KILL LAG
CREND:	LDAA	D,VEL
	CMPA	I,065
	BLS	SKID
	STAA	E,CRSHRS		;RESET CRASH LATCH
SKID:	LDAA	D,FRMCNT
	RORA
	BCC	DIRECT
	LDAB	D,CRSCNT		;NO SKID DURING CRASH
	BNE	DIRECT
	ROR	E,SKIDIN		;READ SKID LATCH
	STAA	E,SKDRST		;CLEAR LATCH
	BCC	DIRECT			;IF NO SKID, GO TO NEXT ROUTINE
	STAA	E,SKDSND		;TURN ON SOUND
	INCB			;B WAS 0 FROM CRSCNT LOAD
	LDAA	D,STRSAV	;TEST LAST STEER DIRECTION
	RORA
	BCC	1$		;IF LEFT, NEGATE SKID CONSTANT
	NEGB
1$:	LDAA	D,ROTREG		;ADD SKID TO ROTATION
	ABA
	STAA	D,ROTREG
	LDAA	D,TREG		;WAG TAIL
	SBA
	STAA	D,TREG
	STAB	D,SKDSAV
DIRECT:	LDAA	D,MODE		;IF IN FRONT AUTO, DIREC=ROTREG
	RORA
	BCC	5$
	LDAA	D,VEL
	ROLA
	LDAA	I,03
	SBCA	I,0		;C(A)=3-(VEL/128)
	LDAB	D,ROTREG	;IF DIRECTION EQ. ROTATION, GO TO NEXT ROUTINE
	SUBB	D,DIREC
	BPL	2$		;IF DIRECTION GT. ROTATION, NEGATE CONSTANTS
	NEGA
	NEGB
2$:	CMPB	I,06		;SKID SOUND ON IF DIFFERENCE GT. 4
	BLS	4$		;AND NOT IN A CRASH SEQUENCE
	TST	E,CRSCNT
	BNE	4$
	STAB	E,SKDSND
4$:	CMPB	I,02
	BHI	3$
5$:	LDAA	D,ROTREG
	BRA	1$
3$:	ADDA	D,DIREC		;UPDATE DIRECTION
1$:	STAA	D,DIREC
TONE:	LDAB	D,TNETME	;EX PLAY TONE
	DECB
	BEQ	1$
	STAB	D,TNETME
1$:	CLRA
	COMB
	BITB	I,03
	BEQ	2$
	COMA
2$:	STAA	E,TNEOUT
BELL:	LDAA	D,TKFG			;GET LATCH BYTE
	ORAA	I,200		;CLEAR BELL BIT
	LDAB	D,BELTME		;SOFTWARE RING?
	BEQ	1$
	BITB	I,014
	BNE	3$
	ANDA	I,177		;SET BELL BIT
3$:	DECB			;DEC COUNT
	STAB	D,BELTME
	BRA	2$
1$:	LDAB	D,MODE			;LOOK AT SWITCH IF THERES A BACK PLAYER
	BITB	I,002
	BEQ	2$
	ROR	E,BELLSW		;SWITCH PUSHED?(D0=1?)
	BCC	2$
	LDAB	I,017
	STAB	D,BELTME
2$:	STAA	D,TKFG
SOUND:	LDAA	D,VEL8
	LSRA			;A=TABLE INDEX, C=NIBBLE
	STAA	D,TEMP+1
	LDAA	I,RPMTBL&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAB	X,RPMTBL&377
	BCS	1$		;CARRY STILL HAS WHEN NIBBLE
	LSRB
	LSRB
	LSRB
	LSRB
1$:	ANDB	I,017
;SIREN
	DEC	E,SIPER		;TIME TO CHANGE FREQUENCY?
	BNE	10$
	LDAA	D,VEL8		;FRAMES BETWEEN CHANGE=9-<VEL/32>
	LSRA
	LSRA
	NEGA
	ADDA	I,013
	STAA	D,SIPER
	LDAA	D,SIFREQ	;BIT 7 SHOWS DIRECTION, BITS 3-6 VALUE
	ADDA	I,010		;INCREMENT VALUE
	STAA	D,SIFREQ
10$:	LDAA	D,SIFREQ
	ASLA			;VALUE TO BITS 4-7
	BCC	9$		;IF C=1, NEGATE
	COMA
	ANDA	I,340	
9$:	ABA			;OR MOTOR BITS
	STAA	E,MOTSND
ACCEL:	LDAA	D,FRMCNT	;ONLY DO EVERY OTHER FRAME
	RORA
	BCS	1$		;DONE
2$:	LDAB	D,VMAX
	BITA	I,017		;EVERY 32 FRAMES, INCREMENT VMAX
	BNE	6$
	INCB
	BNE	7$
	DECB
7$:	STAB	D,VMAX
6$:	LDAB	I,066
	LDAA	D,CRSHSV	;IF IN CRASH, MAKE VMAX LOOK LIKE 066
	BMI	8$
	LDAA	D,JAKFLG	;IF IN JAKNIFE, MAKE WMAX LOOK LIKE 066
	BNE	8$
	LDAB	D,VMAX
8$:	SEC			;IF VEL=0, NO DECELERATION
	LDAA	D,VEL
	BEQ	5$
	CBA			;C=1 IF VEL LT VMAX
	BCC	5$		;DECELERATION HAS TOP PRIORITY
	LDAA	D,MODE		;FRONT AUTO DRIVE
	BITA	I,01	
	BEQ	5$		;YES, GO TO UPDATE
	ROR	E,GASIN		;GAS TO CARRY
;
;VELOCITY UPDATE
;
5$:	LDAA	I,377		;A=-1
	ADCA	I,0		;IF C=1, A=0 & C=1
	ADCA	D,VEL
	STAA	D,VEL
	LSRA
	LSRA
	LSRA
	STAA	E,VEL8		;SAVE VEL/8 FOR SOME ROUTINES
1$:				;DONE
SCORE:  LDAA	D,HCRPOS
	LDAB	D,VCRPOS
	ANDB	I,360
	LSRA
	LSRA
	LSRA
	LSRA
	ABA				;CELL THAT THE CAR IS IN
	STAA	D,TEMP+1
	LDAA	D,MAPN
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,MAP&377
	ROLA
	ROLA
	ROLA
	ANDA	I,03			;C(A)=CHECKPOINT CODE
	LDAB	D,SCRCNT
	INCB
	ANDB	I,03
	CBA
	BNE	TIME
	STAB	D,SCRCNT
	LDAA	I,057		;RING BELL
	STAA	D,BELTME
	LDAA	D,SCOREA
	INCA				;INCREMENT SCORE BY 10
	DAA
	STAA	D,SCOREA
TIME:	DEC	E,FUELTM
	BNE	CRSPIC			;READY TO DECREMENT FUEL?
	LDAA	D,FUEL
	BNE	3$
	LDAB	D,MODE
	BITB	I,004		;CHECK XPLAY BIT
	BNE	2$
	LDAB	D,XTDSCR
	BEQ	2$
	CMPB	D,SCOREA		;COMPARE SCORE TO EXT. PLAY REQUIREMENT
	BHI	2$
	ADDA	I,100			;SET FUEL TO 40
	STAA	D,FUEL
	LDAB	D,MODE			;SET MODE TO INDICATE EXTENDED PLAY
	ORAB	I,004
	STAB	D,MODE
	LDAB	I,137
	STAB	D,TNETME
	LDAB	D,TKFG			;INVERT VIDEO
	EORB	I,004
	STAB	D,TKFG
	BRA	3$
;
;END OF GAME
;
2$:	STAA	E,SKDRST
	CLRA
	STAA	D,HPOS
	STAA	D,HPOS+2
	STAA	D,MODE
	LDAA	I,04
	STAA	D,ROTOUT
	LDAA	D,SCOREA
	CMPA	D,HISCR
	BLS	1$
	STAA	D,HISCR
1$:	JSR	E,RERITE		;REWRITE SCREEN
	JMP	E,ATTRAC
3$:	ADDA	I,231			;ADD 10'S COMPLIMENT OF -1
	DAA
	STAA	D,FUEL
	LDAA	D,TMESAV		;GET TIME OPTION
	STAA	D,FUELTM
CRSPIC:	LDAA	D,CRSCNT		;NO CRASH MESSAGE IF 0
	BEQ	1$
	LDAB	I,200			;SET MOLECULE CROSSING
	STAB	D,MOLXH
	LSRA
	LSRA
	ANDA	I,03
	BEQ	1$
	DECA
	STAA	D,CRSLIN
	ADDA	D,HPOS			;MOVE HPNT TO CENTER OF SCREEN
	ADDA	I,012
	STAA	D,HPNT
	TAB
	ANDA	I,017
	STAA	D,HPFAC+1
	LDAA	D,VPOS
	STAA	D,VPNT
	CLR	E,CELLX
	JSR	E,RCLLOC		;GET LINE
	JSR	E,NXTCLH
	LDAA	D,CRSCNT		;IF FINAL TINE,SKIP MESSAGE
	CMPA	I,357
	BHI	1$
	LDAA	I,007			;FILL COUNTER
	STAA	D,SAVE
	CLR	E,TEMP
	LDAB	D,HPOS+2		;RANDOM NUMBER
	ANDB	I,03
	LDAA	D,VPNT			;FIND CENTER OF SCREEN
	ADDA	I,04
	ABA
	LDAB	D,CRSLIN		;GET LINE
	EORB	I,03			;**
	DECB
	STAB	D,SAVE+1
	ASLB				;MULTIPLY BY 8
	ASLB
	ASLB
	SUBB	D,SAVE+1		;SUBTRACT 1
	ADDB	I,253			;C(B)=250+7(LINE)
2$:	ANDA	I,017
	STAA	D,TEMP+1
	LDX	D,TEMP
	STAB	X,HOUT
	INCA
	INCB
	DEC	SAVE
	BNE	2$
1$:				;DONE
BLINK:	LDAA	D,FRMCNT
	ANDA	I,007
	CMPA	I,005			;ON 6, OFF 2
	BLS	1$
	STAA	E,ARROFF
1$:					;DONE
DISTNC: LDAA	D,VEL8			;DISTANCE=DISTANCE+VEL/8
	ADDA	D,DIST
	STAA	D,DIST
	BCC	1$			;AFTER 255, ENABLE ARROWS IN AUTO DRIVE
	CLR	E,ARRLOK
1$:					;DONE
	JSR	LAMP
	LDAA	D,MODE			;NO AUTO DRIVE IF A PLAYER
	RORA
	BCS	2$
	LDX	I,015			;INDEX FOR AUTODRIVE
	JSR 	SINCOS
2$:	LDX	I,0
	JSR	SINCOS
3$:
AUTO:	LDAA	D,VAUTO		;BUILD POINTER INTO SCREEN RAM
	ASLA
	ASLA
	ASLA
	ASLA
	LDAB	D,HAUTO
	ANDB	I,017
	ABA
	STAA	D,SCNPNT+1
	LDAA	I,PLYFLD&177400/400
	STAA	D,SCNPNT
	LDAB	D,AUTDIR		;GET INCREMENT FROM TABLES
	JSR 	CNVRT			;CONVERT TO ONE OF TWENTY FOUR
	STAB	D,SCAN+1
	LDAA	I,SCNTBL&177400/400
	STAA	D,SCAN
	CLR	E,STEP			;START COUNTING

VERT:	LDX	I,01
	JSR	SCROLL
	BMI	2$
1$:	JMP	VEND
2$:	ASLA
	ASLA
	ASLA
	ASLA
	RORB
	BCC	3$
	SUBA	I,020
3$:	STAA	D,VPFAC+1
	LDAA	D,VPOS
	LDAB	D,MOLXV
	RORB
	BCC	4$
	ADDA	I,017
4$:	STAA	D,VPNT
	LDAB	D,HPOS
	STAB	D,HPNT
	CLR	E,CELLX
	JSR	E,RCLLOC
NXTCLV:	JSR	E,RCELID
CONTV:	JSR	GOCELL
	BNE	4$
	LDX	D,MOLPNT
	LDAA	X,0
4$:	LDX	D,HPOSM-1
	STAA	X,VOUT
	LDAB	D,HPOSM
	INCB
	ANDB	I,017
	STAB	D,HPOSM
	LDAA	D,HPOS
	ANDA	I,017
	CBA
	BEQ	VEND
	TSTB
	BNE	CONTV
	INC	E,CELLOC
	LDAA	D,CELLOC
	ANDA	I,017
	BNE	9$
	LDAA	D,CELLOC
	SUBA	I,020
	STAA	D,CELLOC
9$:	JMP	E,NXTCLV
VEND:					;DONE
HORIZ:	LDX	I,0
	JSR	SCROLL
	BPL	READY
2$:	RORB
	BCC	3$
	ADDA	I,017
3$:	STAA	D,HPNT
	TAB
	ANDA	I,017
	STAA	D,HPFAC+1
	LDAA	D,VPOS
	STAA	D,VPNT
	CLR	E,CELLX
	JSR	E,RCLLOC
	JSR	E,NXTCLH
READY:	STAA	E,WTCHDG		;RESET WATCHDOG
	WAI
	JMP	E,GO
SINCOS:	LDAB	X,DIREC		;GET DIRECTION REGISTER & CONVERT TO PICTURE
	ANDB	I,177		;TRANSFER TO FIRST HEMISPHERE
	JSR	E,CNVRT
	TBA
	LDAB	D,VEL
	STAA	D,TEMP+1	;GET SINE
	BEQ	2$
	CMPA 	I,06
	BEQ	2$
	LDAA	I,DIRTBL&177400/400
	STAA	D,TEMP
	STX	D,XSAV
	LDX	D,TEMP
	LDAA	X,DIRTBL&377
	ASLA
	ASLA
	ASLA
	ASLA
	JSR	E,SINMUL	;B=(VEL)(SIN 0)
	LDAA	X,DIRTBL&377	;GET COSINE
	LDX	D,XSAV
	STAB	X,VELX
	LDAB	D,VEL
	ANDA	I,360
	JSR	E,SINMUL
	STAB	X,VELY
	BRA	VELSGN
2$:	LSRB		;MULTIPLY BY 3/8
	LSRB
	STAB	D,TEMP
	LSRB
	ADDB	D,TEMP
	CLR	X,VELX		;ASSUME UP-DOWN
	STAB	X,VELY
	TSTA			;IF A=6, SHOULD BE SIDEWAYS
	BEQ	3$
	CLR	X,VELY
	STAB	X,VELX
3$:
VELSGN:	LDAA	X,DIREC		;IF PICTURE IS MORE THAN 12, VELX IS NEGATIVE
	BPL	2$
	NEG	X,VELX
2$:	ROLA			;IF PICTURE BETWEEN 6 AND 18, VELY IS POSITIVE
	BVS	1$		;V SET BY BIT 6 EOR BIT 7
	NEG	X,VELY
1$:				;DONE
	LDAA	D,CRSCNT
	BNE	S1
3$:	STX	D,XSAV		;TEST X
	BNE	VUPDTE		;ONLY DO WHEN X=0
	LDAA	D,MODE		;ONLY DO IF IN AUTODRIVE
	RORA
	BCS	VUPDTE
	LDAA	D,HAUTO+2		;COMPUTE HORIZONTAL DISPLACEMENT
	SUBA	D,HCRPOS+1
	LDAB	D,HAUTO
	SBCB	D,HCRPOS
	JSR	SPRING		;COMPUTE "SPRING" CONSTANT
	ADDA	D,VELX
	STAA	D,VELX
	LDAA	D,VAUTO+2		;NOW DO VERTICAL
	SUBA	D,VCRPOS+1
	LDAB	D,VAUTO
	SBCB	D,VCRPOS
	JSR	SPRING
	ADDA	D,VELY
	STAA	D,VELY
VUPDTE:	CLRA			;ADD VELY TO VPOS+1
	STAA	X,MOLXV		;CLEAR MOLECULE CROSSING FLAG
	LDAB	X,VELY
	BPL	2$
	DECA			;A=FF IF VELY NEGATIVE
2$:	ADDB	X,VPOS+2
	STAB	X,VPOS+2
	ADCA	I,0
	BEQ	1$		;IF VPOS WON'T CHANGE, GO ON
	TAB			;SAVE A IN B
	ADDA	X,VPOS
	STAA	X,VPOS
	LDAA	I,201
	ROLB			;CARRY SET IF B NEG
	SBCA	I,0
	STAA	D,MOLXV
1$:	LDAA	X,VPOS+2	;VCRPOS=VPOS+0780
	ADDA	I,200
	STAA	X,VCRPOS+1
	LDAA	X,VPOS
	ADCA	I,007
	STAA	X,VCRPOS
HUPDTE:	CLRA			;ADD 3 TIMES VELX TO HPOS+1
	STAA	X,MOLXH		;CLEAR MOLECULE CROSSING FLAG
	LDAB	X,VELX
	BPL	3$
	DECA			;A=FF IF VELX NEGATIVE
3$:	ADDB	X,HPOS+2
	STAB	X,HPOS+2
	STAB	X,HCRPOS+1	;HCRPOS+1=HPOS+1
	ADCA	I,0
	BEQ	1$		;IF HPOS WON'T CHANGE, GO ON
	TAB			;SAVE A IN B
	ADDA	X,HPOS
	STAA	X,HPOS
	ADDA	I,007
	STAA	X,HCRPOS
	LDAA	I,201
	ROLB			;CARRY SET IF B NEGATIVE
	SBCA	I,0
	STAA	D,MOLXH
1$:				;DONE
S1:	RTS			;DONE
NXTCLH:	JSR	E,RCELID
CONTH:	JSR	GOCELL
	BNE	8$
	LDX	D,MOLPNT
	LDAA	X,0
8$:	LDX	D,VPOSM-1
	STAA	X,HOUT
	LDAB	D,VPOSM
	INCB
	ANDB	I,017
	STAB	D,VPOSM
	LDAA	D,VPOS
	ANDA	I,017
	CBA
	BEQ	9$		;ALL 16 COMPUTED. . . FINISHED
	TSTB
	BNE	CONTH
	LDAA	D,CELLOC
	ADDA	I,020
	STAA	D,CELLOC
	JMP	E,NXTCLH
9$:	RTS
CNVRT:	CLRA
	STAB	D,TEMP
	ASLB			;MULTIPLY BY 3
	ROLA
	ADDB	D,TEMP
	ADCA	I,0
	ASRA			;DIVIDE BY 32
	RORB
	ASRA
	RORB
	LSRB
	LSRB
	LSRB
	RTS
SPRING:	LDX	I,04		;IF NOT JAKNIFED, CONSTANT=DIST/16
1$:	ASRB
	RORA
	DEX
	BNE	1$
	TAB			;SAVE A
	BPL	2$
	NEGA			;MAKE POSITIVE
2$:	CMPA	I,017		;KEEP LT 16
	BLS	3$
	LDAA	I,017
3$:	TSTB			;GET SIGN
	BPL	4$
	NEGA
4$:	LDAB	D,VEL		;AT SLOW SPEED, DECREASE SPRING EFFECT
	CMPB	I,140
	BHI	5$
	ASRA
5$:	RTS
SINMUL:	STAB	D,TEMP		;MULTIPLICAND TO B
	CLRB			;CLEAR PRODUCT
	STAB	D,TEMP+1	;CLEAR FLAG
3$:	TSTA			;TEST MULTIPLIER
	BPL	1$
	ADDB	D,TEMP
	BCC	1$
	INC	E,TEMP+1	;IF CARRY, SET FLAG
1$:	LSR	E,TEMP		;DIVIDE MULTIPLICAND BY 2
	ASLA			;NEXT BIT OF MULTIPLIER
	BNE	3$		;IF 0, WE'RE DONE, ELSE CONT
	ROR	E,TEMP+1
	RORB			;DIVIDE BY 16 MULTIPLY BY 3
	LSRB
	LSRB
	TBA			;SAVE IN A
	LSRB
	ABA
	TAB			;RESULT IN B
	RTS
SCROLL:
	LDAA	X,VELX			;SKIP ROUTINES IF NO MOTIN
	BEQ	1$			;BRANCH TO "JUMP TO END"
	LDAA	X,HPOS
	ASLA
	ASLA
	ASLA
	ASLA
	LDAB	X,HPOS+2
	LSRB
	LSRB
	LSRB
	LSRB
	ABA
	STAA	X,PHPOUT
	LDAA	X,HPOS
	LDAB	X,MOLXH
1$:	RTS
RCLLOC:	ANDA	I,360		;C(A)=VPNT
	LSRB			;C(B)=HPNT
	LSRB
	LSRB
	LSRB
	ABA			;LOCATION OF POINTER IN
	STAA	D,CELLOC	;MAP, CELL ADDRESS
	LDAA	D,HPNT
	ANDA	I,017
	STAA	D,HPOSM
	LDAB	D,VPNT
	ANDB	I,017
	STAB	D,VPOSM
	RTS
RCELID:	LDAA	D,CELLOC	;GET ID OF CELL
	STAA	D,TEMP+1	;BEING POINTED TO
	LDAB	D,MAPN		
	STAB	D,TEMP		
	LDX	D,TEMP
	LDAB	X,0
RCLIDM:	STAB	D,CELLID
	ANDB	I,017		;BUILD POINTER FOR CELL TABLE MSB
	ADDB	I,CELTBL&177400/400
	STAB	D,MOLPNT
	DEC	E,CELLX		;SET CELL CROSSING POINTER
	RTS
GOCELL:
	LDAA	D,HPOSM
	LDAB	D,VPOSM
	ASLB
	ASLB
	ASLB
	ASLB
	ANDA	I,017
	ABA
	STAA	D,MOLPNT+1
	LDAA	D,MOLPNT
	CMPA	I,CELTBL&177400/400+014
	BNE	3$
	JSR	RANNUM
	ANDA	I,003
	BEQ	2$
	DECA
2$:	ADDA	I,100
	RTS
3$:
SPEC:	LDAA	D,CELLX
	BEQ	SPGO
	LDAA	D,SPECN		;SET UP X TO GET SPCTBL+CELLOC
	STAA	D,TEMP
	LDAA	D,CELLOC
	STAA	D,TEMP+1
	LDX	D,TEMP
	LDAA	X,0			;C(A)=LLCC 0000
	STAA	D,SPECCD		;SAVE CODE
	BEQ	SPEND
	LDAB	I,LOCTBL&177400/400		;GET LOCATION
	STAB	D,TEMP
	LDAB	D,CELLID
	ROLA
	ROLB
	ROLA
	ROLB				;C(B)=4 (CELL)+LOCATION #
	STAB	D,TEMP+1
	LDX	D,TEMP
	LDAB	X,LOCTBL&377		;C(B)=SPECIAL LOCATION
	STAB	D,SPCLOC
	LDAA	I,SPCXPD&177400/400
	STAA	D,TEMP
	LDAA	D,SPECCD
	ANDA	I,017		;C(A)=OBJECT CODE

	STAA	D,TEMP+1
	LDX	D,TEMP
	LDAA	D,SPECCD
	ASLA
	ASLA
	ANDA	I,300			;C(A)=COLOR CODE
	ADDA	X,SPCXPD&377		;C(A)=SPECIAL OBJECT
	STAA	D,SPCOBJ
SPGO:	LDAA	D,SPECCD		;C(SAVE)=CODE FROM SPECIAL TABLE
	BEQ	SPEND
	LDAB	D,SPCLOC
	ANDA	I,017
	BEQ	BIGOBJ
	LDAA	D,SPCOBJ
	CMPB	D,MOLPNT+1
	BEQ	SPDONE
	BRA	SPEND
BIGOBJ:	LDAA	D,SPCOBJ	;FIRST PIECE
	CMPB	D,MOLPNT+1
	BEQ	SPDONE
	DECB
	INCA
	CMPB	D,MOLPNT+1
	BEQ	SPDONE
	SUBB	I,020
	INCA
	CMPB	D,MOLPNT+1
	BEQ	SPDONE
	INCB
	INCA
	CMPB	D,MOLPNT+1
	BEQ	SPDONE
SPEND:	CLRA
SPDONE:	CLR	E,CELLX
	TSTA
	RTS
SEEK:	LDX	D,SCAN			;GET FIRST INCREMENT
	LDAA	X,SCNTBL&377
	TAB
	ANDA	I,360			;ISOLATE VERTICAL INCREMENT
	ADDA	D,SCNPNT+1		;ADD VERTICAL
	ANDA	I,360			;ISOLATE VERTICAL INCREMENT
	ADDB	D,SCNPNT+1		;ADD HORIZONTAL
	ANDB	I,017			;ISOLATE HORIZONTAL
	ABA				;COMBINE
	STAA	D,SCNPNT+1
	LDX	D,SCNPNT
	LDAA	X,PLYFLD&377		;GET SCREEN CHARACTER
	CMPA	I,TREE
	BEQ	BLEWIT
	LDAB	D,ARRLOK		;IF ARROWS LOCKED OUT, DON'T BOTHER
	BNE 	2$
	CMPA	I,203			;ARROW? LOOK FOR 84-8B
	BLS	2$
	CMPA	I,213
	BHI	2$
	DECA
	ASLA
	ASLA
	ASLA
	ASLA
	ASLA
	LDAB	I,040			;45 DEG. INCREMENT
	SUBA	D,AUTDIR		;HOW FAR & WHICH WAY
	BEQ	3$			;IF ON IT, NO CHANGE
	BPL	1$
	NEGB				;WRONG WAY
1$:	ADDB	D,AUTDIR
	STAB	D,AUTDIR
	LDAA	I,377			;SET LOCK-OUT FLAG
	STAA	D,ARRLOK
	CLR	E,DIST			;CLEAR DISTANCE COUNTER
3$:	BRA	F2
2$:	CMPA	I,STRIPE		;ON IT?
	BEQ	FOUND
	INC	E,STEP
	INC	E,SCAN+1		;SET UP FOR NEXT SEARCH
	RTS
BLEWIT:	LDAB	I,011		;REMOVE RETURN ADDRESS FROM STACK
1$:	PULA			;REMOVE INTERRUPT STUFF
	DECB
	BNE	1$
	JSR 	RERITE			;REWITE ROAD + START OVER
	JSR	INIT2
	JMP	GO
FOUND:	LDAB	I,040			;ASSUME RIGHT-MOVE 45 DEGREES
	LDAA	D,STEP
	BEQ	F2
	DECA
	BEQ	2$
	NEGB				;SHOULD HAVE BEEN LEFT
2$:	ADDB	D,AUTDIR
	ANDB	I,340
	STAB	D,AUTDIR		;DIVIDE BY 32, MULTIPLY BY 3
	LSRB				;CHECK OUR ROTATION CHANGE
	LSRB				;BY LOOKING TWO AHEAD AND
	LSRB				;CHECKING FOR A STRIPE
	LSRB
	STAB	D,SCAN+1
	LSRB
	ADDB	D,SCAN+1
	STAB	D,SCAN+1
	LDX	D,SCAN			;INCREMENT
	LDAA	D,VAUTO
	ASLA
	ASLA
	ASLA
	ASLA
	ADDA	X,SCNTBL&377		;MOVE VERTICAL
	ANDA	I,360			;ISOLATE NIBBLE
	ADDA	X,SCNTBL&377		;ADD IT AGAIN
	ANDA	I,360
	LDAB	D,HAUTO		;STEP TWICE
	ADDB	X,SCNTBL&377
	ADDB	X,SCNTBL&377
	ANDB	I,017			;ISOLATE HORIZONTAL
	ABA				;COMBINE
	STAA	D,SCNPNT+1
	LDX	D,SCNPNT
	LDAA	X,PLYFLD&377		;GET MOLECULE
	CMPA	I,STRIPE
	BEQ	F2			;WE'RE OK
	LDAA	I,040			;BAD-REMOVE
	LDAB	D,STEP			;WHICH WAY?
	DECB
	BNE	3$
	NEGA
3$:	ADDA	D,AUTDIR		;REMOVE INCREMENT
	STAA	D,AUTDIR
F2:	PULA				;REMOVE RETURN ADD. FROM STACK
	PULA
	RTI				;THIS IS THE FINAL ROUTINE IN NMI
LAMP:	LDAA	D,TKFG			;START BY TURNING OFF LAMPS
	ORAA	I,043
	LDAB	D,MODE			;IF MODE BIT SET, TURN ON LAMP
	ANDB	I,003
	CMPB	I,003			;IF BOTH STARTED, CLEAR BIT 5
	BEQ	4$			;IF BOTH IN,LITE #3
	ROL	CABIN			;IF IN TWO PIECE, SKIP
	BMI	5$
	BITB	I,002			;BACK IN?
	BEQ	5$
4$:	LDAB	I,040			;LITE #3
5$:	SBA
	LDAB	D,MODE			;NO BLINK DURING GAME
	DECB
	BPL	1$
	LDAB	D,FRMCNT		;BLINK EVERY 16 FRAMES
	BITB	I,020
	BEQ	1$
	LDAB	D,CREDIT		;NO BLINK IF NO CREDIT
	BLE	1$
	ROL	CABIN
;IN SINGLE CABINET, THE "BOTH" LITE BECOMES "REAR"
;IN THIS CASE, AT THIS POINT, WE WANT TO LITE IT
;AND THE FRONT.
	BMI	3$			;DOUBLE CABINET, THEN ON TO 3$
	ANDA	I,336			;NOPE-LITE "FRONT" & "BOTH"
	BRA	1$
3$:	TST	MODE			;IF ONE PLAYER IN, BLINK "BOTH"
	BNE	2$
	ANDA	I,374			;BLINK FRONT & REAR LAMPS
	DECB
	BEQ	1$			;IF CREDIT GT 1, BLINK BOTH
2$:	ANDA	I,337

1$:	STAA	D,TKFG
	RTS
RANNUM:	LDAB	I,04
	LDAA	D,RANDOM+1
1$:	RORA
	RORA
	RORA
	EORA	D,RANDOM
	ROLA
	ROR	E,RANDOM
	LDAA	D,RANDOM+1
	RORA
	STAA	D,RANDOM+1
	DECB
	BNE	1$
	TSTA				;CHECK FOR ILLEGAL NUMBER
	BNE	2$
	TST	E,RANDOM
	BNE	2$
	COM	E,RANDOM
2$:	RTS
INIT:	LDAA	I,220				;FUEL=90
	STAA	D,FUEL	
	LDAA	I,340		;INITIAL TOP SPEED FOR SINGLE PLAYER
	STAA	D,VMAX
	CLRA
	STAA	D,SIFREQ
	STAA	D,SCOREA
	INCA
	STAA	D,SIPER
	STAA	E,TNEOUT
	STAA	D,TNETME
INIT2:	LDAA	I,MAP&177400/400		;MAP 1
	LDAB	I,SPCTBL&177400/400
	PSHA
	LDAA	D,TKFG				;WHICH TRACK?
	BITA	I,010
	PULA
	BNE	1$
	INCA
	INCB
1$:	STAA	D,MAPN			;STORE MAP CHOSEN
	STAB	D,SPECN
;CLEAR RAM FROM SCRCNT TO VAUTO +2
	LDX	I,<VAUTO+2>-<SCRCNT-1>
	CLRA
2$:	STAA	X,SCRCNT-1
	DEX
	BNE	2$
	STAA	E,CRSHRS
	STAA	E,SKDRST
	STAA	E,MOTSND
	STAA	E,STRRST
	STAA	E,CSHSND
	LDAB	I,STRTBL&177400/400
	STAB	D,TEMP
	LDAB	D,RANDOM		;GET A RANDOM NUMBER
	ANDB	I,007
	LDAA	D,TKFG			;ISOLATE TRACK BIT
	ORAA	I,367
	COMA
	ABA				;ADD IT IN
	STAA	D,TEMP+1
	LDX	D,TEMP
	LDAB	X,STRTBL&377
	TBA
	ANDB	I,360
	STAB	D,VPOS
	ADDB	I,010
	STAB	D,VCRPOS
	STAB	D,VAUTO			;INITIAL AUTODRIVE POINTER
	ASLA
	ASLA
	ASLA
	ASLA
	STAA	D,HPOS
	ADDA	I,007
	STAA	D,HCRPOS
	STAA	D,HAUTO			;INITIAL AUTODRIVE POINTER
	LDAA	I,010
	STAA	D,PVPOUT
	LDAA	I,200
	STAA	D,VPOS+2
OPTN:	LDAA	E,TMEOPT
	ANDA	I,03
	STAA	D,TEMP+1
	LDAA	I,TMETBL&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,TMETBL&377
	STAA	D,FUELTM
	STAA	D,TMESAV
	LDAA	E,COINOP		;GET COST
	LSRA
	LSRA
	ANDA	I,003			;ISOLATE LOW 2 BITS
	CMPA	I,003			;IF OPT=3, COST=4
	BNE	1$
	INCA
1$:	STAA	D,COST			;COST=0,1,2, OR 4
	LDAA	E,XPOPT			;READ EXTENDED PLAY OPTION SWITCH
	ANDA	I,03
	ASLA
	ASLA				;C(A)=4(XPOPT)
	ADDA	D,TEMP+1		;GET TIME OPTION, STILL IN TEMP1
	STAA	D,TEMP+1		;C(A)=4(XPOPT)+TMEOPT
	LDAA	I,XPLTBL&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,XPLTBL&377
	STAA	D,XTDSCR
	LDAA	I,100
	STAA	D,ROTREG
	STAA	D,DIREC
	STAA	D,AUTDIR
	STAA	D,TREG
	STAA	D,TROT
	LDAA	I,04
	STAA	D,ROTOUT
	LDAA	I,36		;TAIL PICTURE
	STAA	D,TPSAV
	LDAA	I,207		;TAIL POSITION
	STAA	D,TVSAV
	LDAA	I,201
	STAA	D,THSAV
	LDAA	I,PLYFLD&177400/400
	STAA	D,VPFAC
	STAA	D,HPFAC
	RTS
RERITE:	LDAA	D,MODE			;NO AUTODRIVES DURING RE-RITE
	PSHA				;SAVE MODE
	ORAA	I,003			;ENABLE BOTH PLAYERS
	STAA	D,MODE
	LDAB	I,017			;START LINE COUNT
1$:	STAB	D,HPOSM
	STAB	D,HPFAC+1
	CLRA
	STAA	D,ZERO
	STAA	D,SPECN
	STAA	D,CELLX
	STAA	D,VPOS
	STAA	D,VPOSM
	STAA	D,PHPOUT
	STAA	D,MOLXV
	LDAA	I,ZERO
	STAA	D,CELLOC
	LDAA	I,201
	STAA	D,MOLXH
	PSHB
	LDAB	I,001
	JSR	E,RCLIDM		;BUILD LINE
	JSR	E,CONTH
	PULB
	STAA	E,WTCHDG
	WAI
	DECB
	BPL	1$
	PULA				;RESTORE MODE
	STAA	D,MODE
	RTS
CABROT:
	JSR	E,CNVRT
	STAB	D,TEMP+1
	LDAA	I,ROTTBL&177400/400	;GET VIDEO CODE
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,ROTTBL&377
	RTS
TLROT:
	JSR	CNVRT
	STAB	D,TEMP+1
	LDAA	I,TTBL&177400/400
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,TTBL&377		;OUTPUT CODE
	RTS
IRQ:	STS	D,ITEMP			;TEST STACK POINTER
	TST	E,ITEMP			;STACK ON PAGE ZERO
	BEQ	8$			;CONTINUE
	JMP 	TSTRTN			;RETURN TO TEST
8$:	LDX	D,PRTCD			;VERIFICATION
	CPX	I,PROT
	BEQ	10$
	JMP	PWRON
10$:
;
;LOOK FOR COINS
;
	ROR	E,SLAMSW	;SLAM TO CARRY C=1=SLAM
	BCC	11$
	LDX	I,06
	CLRA
9$:	STAA	X,COINDB-1	;CLEAR DEBOUNCE 8 POST-SLAM REGISTERS
	DEX
	BNE	9$
13$:	DECA
	STAA	D,PRESLM
	BRA	BUTTON
11$:	LDAA	D,PRESLM	;LOOK FOR PRE-SLAM
	BNE	13$
	LDAA	I,01
	STAA	D,ITEMP+1
COIN:	LDAA	I,COINSW&177400/400
	STAA	D,ITEMP
	LDX	D,ITEMP
	CLR	E,ITEMP
	ROL	X,COINSW&377
	LDX	D,ITEMP
	ROL	X,COINDB
	LDAA	X,COINDB
	CMPA	I,CNMSK1	;COMPARE TO MASK FOR RISING EDGE
	BNE	10$
	SEC
	ROR	X,CNSTAT	;BIT 7 HI SHOWS EDGE
10$:	CMPA	I,CNMSK2	;COIN GONE
	BNE	1$
	LDAA	X,CNSTAT	;WAS COIN HERE 16 MS.
	BPL 1$
	CLR	X,CNSTAT	;IT'S A COIN-CLEAR STATUS FLAG
	LDAA	X,PSTSLM	;SET BIT 15 IN POST-SLAM WORD
	ORAA	I,200
	STAA	X,PSTSLM
1$:	LDAA	D,COINS
	ROR	X,PSTSLM+2	;BIT 0=1, THEN COIN
	BCC	5$
	ADDA	I,02		;ADD 2 TO COINS
5$:	ASL	X,PSTSLM+2
	LDAB	D,CREDIT	;NUMBER OF ACTUAL CREDITS
3$:	CMPA	D,COST		;MORE COINS THAN COST
	BLT	2$
	SUBA	D,COST		;REMOVE COINS & BUMP CREDIT
	INCB
	CMPB	I,004		;NO MORE THAN 4 CREDITS ALLOWED
	BLS	3$		;LOOP BACK
	LDAB	I,004		;SET CREDITS TO 4
2$:	STAB	D,CREDIT
	STAA	D,COINS
	DEC	E,ITEMP+1	;DO IT TWICE
	BEQ	COIN
BUTTON: LDAA	D,CREDIT	;ENTER ROUTINE IF CREDIT
	BGT	1$
	LDAB	D,MODE		;NO CREDIT,BUT IN FREEZE? ENTER ROUTINE
	BEQ	2$
1$:	ROL	HIRST
	BPL	3$
	CLR	HISCR		;CLEAR HI SCORE TO DATE
3$:	LDAB	E,TKSEL		;TRASK SWITCH TO CARRY
	ROLB
	ROLB
	ROL	E,DBREG
	LDAB	D,DBREG
	CMPB	I,177
	BNE 2$
	LDAB	D,TKFG		;TOGGLE TRACK SELECT BEIT
	EORB	I,010
	STAB	D,TKFG
2$:
;START BUTTON ROUTINE
;IF 2-PIECE CABINET, LOOK AT ALL TREE BUTTONS
;IF 1-PIECE CABINIT, LOOK AT #2 & #0
;
	TSTA			;ANY CREDIT?
	BLE	6$		;NONE-GET OUT
	LDAB	D,MODE		;GO ON IF BOTH PLAYERS ARE IN
	COMB
	BITB	I,003
	BEQ	6$
	LDX	I,START2
	ROL	CABIN
	BPL 	5$
;DUAL CABINET
;--START BOTH--
	ROL	X,0		;SWITCH TO BIT 7
	BPL	11$		;NOPE, NEXT ROUTINE
	LDAB	D,MODE	
	BNE	4$		;NO ONE IN, IF TWO CREDITS
12$:	DECA			;CREDIT GE 2
	BLE	11$
4$:	DECA			;TAKE A CREDIT
	STAA	D,CREDIT
	LDAB	I,203		;FREEZE & BOTH PLAYERS
	STAB	D,MODE
9$:	RTI
11$:	DEX
5$:
;--START REAR & FRONT
	LDAB	I,002	
15$:	BITB	D,MODE		;PLAYER IN?
	BNE	8$		;YES, GET OUT
	ROL	X,0		;SWITCH CLOSED?
	BPL	8$		;NO, GO ON
	TBA			;SAVE B
	ORAA	D,MODE
	ORAA	I,200		;SET FREEZE BIT
	STAA	D,MODE
	DEC	CREDIT
	BEQ	6$		;IF NO MORE CREDIT, GET OUT
8$:	LDX	I,START0
	ASRB
	BNE	15$
6$:	RTI
BAD:	JMP	PWRON
NMI:	LDX	D,PRTCD		;CHECK VERIFICATION
	CPX	I,PROT
	BNE	BAD
	STS	D,SAVE		;SAVE THE STACK POINTER
	LDAB	D,MODE		;CHECK IF WE'RE OK
	BEQ	3$		;OK
	DECB
	ANDB	I,^B01111011
	CMPB	I,02
	BHI	BAD		;NO GOOD
	LDAA	D,MOLXV		;START VERTICAL
	BPL	3$		;NO CROSSING, MOVE ON
	LDAB	I,020
	LDS	I,VOUT-1
	LDX	D,VPFAC			;C(X)=(PLFD)+(PFP&F0)
2$:	PULA
	STAA	X,0
	INX
	DECB
	BNE	2$
3$:	LDAA	D,MOLXH			;ANY MOLECULE CROSSING
	BPL	MESS			;NO? GO ON
	LDS	I,HOUT-1
1$:	LDX	D,HPFAC			;C(X)=(PFLD)+(PHP/10)
	PULA
	STAA	X,0
	LDAB	D,HPFAC+1
	ADDB	I,020
	STAB	D,HPFAC+1
	BCC	1$
	LDAA	D,MOLXH			;TEST. IF BOTH BOUNDARIES CROSSED,
	ANDA	D,MOLXV			;SAVE TIME & SKIP OTHER MESSAGE
	BPL	MESS
	JMP	N3
MESS:
;
;THE MESSAGE ROUTINE CAN'T USE THE STACK FOR SAVING SUBROUTINE RETURN
;ADDRESSES BECAUSE THE STACK IS NEEDED FOR OUTPUTTING.  THEREFORE, THE
;OUTPUT ROUTINE IS CALLED BY LOADING THE RETURN SADDRESS INTO THE INDEX
;REGISTER AND JUMPING TO OUTPUT.  THE B ACCUMULATOR CONTAINS THE MESSAGE
;NUMBER.
;
	LDAA	D,FRMCNT	;ALTERNATE TOP & BOTTOM
	ASRA
	BCC	BOTTOM
TOP:	LDS	I,LOC0+16	;POINT TO SCREEN LOCATION
	LDAB	D,MODE
	BEQ	1$		;ATTRACT
	BMI	2$		;FREEZE
	LDAB	I,005		;GAME - FUEL
	LDX	I,3$		;RETURN TO OUTPUT NUMBER
	JMP	OUTPUT
3$:	LDAA	D,FUEL
	TAB
	ANDA	I,017		;ISOLATE TENS DIGIT
	STAA	E,LOC0+014
	LSRB
	LSRB
	LSRB
	LSRB
	BEQ	4$		;SKIP IF ZERO
	STAB	E,LOC0+013
4$:	JMP	ENDMES		;DONE
2$:	LDAB	I,011		;FREEZE MESSAGE - 'PUSH START'
	BITA	I,020		;ALTERNATE WITH BLANK
	BEQ	5$
7$:	CLRB			;'BLANK'
5$:	LDX	I,ENDMES	;FINISHED AFTER OUTPUT
	JMP	OUTPUT
1$:	TSTA			;ALTERNATE BONUS AND HI SCORE
	BMI	6$
	LDAA	D,XTDSCR
	BEQ	7$		;IF BONUS=0, OUTPUT BLANK
	LDAB	I,007		;'BONUS FOR'
	LDX	I,8$		;RETURN TO OUTPUT NUMBER
	JMP	OUTPUT
8$:	LDAA	D,XTDSCR
	TAB
	LSRA
	LSRA
	LSRA
	LSRA
	BEQ	9$		;SKIP IF ZERO
	STAA	E,LOC0+13
9$:	ANDB	I,017
	STAB	E,LOC0+14
	JMP	ENDMES
6$:	LDAB	I,010		;'HI SCORE'
	LDX	I,10$		;RETURN TO OUTPUT NUMBER
	JMP	OUTPUT
10$:	LDAA	D,HISCR
	TAB
	ANDA	I,017
	STAA	E,LOC0+015
	LSRB
	LSRB
	LSRB
	LSRB
	BEQ	11$		;SKIP IF ZERO
	STAB	E,LOC0+014
11$:	JMP	ENDMES
BOTTOM:	LDS	I,LOC1+016	;POINT TO SCREEN
	LDAB	D,MODE
	BEQ	1$		;ATTRACT
	BMI	2$		;FREEZE
6$:	LDAB	I,006		;GAME - 'SCORE'
	LDX	I,3$		;RETURN TO OUTPUT NUMBER
	JMP	OUTPUT
3$:	LDAA	D,SCOREA
	TAB
	ANDA	I,017
	STAA	E,LOC1+014
	LSRB
	LSRB
	LSRB
	LSRB
	BEQ	4$
	STAB	E,LOC1+013
4$:	JMP	ENDMES		;DONE
2$:	LDAB	I,011		;FREEZE MESSAGE - 'PUSH START'
	BITA	I,020		;ALTERNATE WITH BLANK
	BNE	5$
	CLRB
5$:	LDX	I,ENDMES	;DONE AFTER OUTPUT
	JMP	OUTPUT
1$:	ROLA			;ALTERNATE SCORE & RATING
	ROLA			;V=B6 EOR B7 OF FRMCNT
	BVC	6$		;GO TO SCORE ROUTINE USED DURING GAME
	LDAB	I,001		;FIRST RATING
	LDAA	D,SCOREA
	CMPA	E,RATTBL
	BLS	7$
	INCB			;SECOND RATING
	CMPA	E,RATTBL+1
	BLS	7$
	INCB
	CMPA	E,RATTBL+2
	BLS	7$
	INCB
7$:	LDX	I,ENDMES
	JMP	OUTPUT
OUTPUT:	STX	D,ADDSAV		;SAVE RETURN ADDRESS
	CLRA			;NEEDED IF B=0
	TSTB			;IF B=0, ALWAYS GO TO BLANK
	BEQ	3$
	LDAA	E,MESOPT		;MESS=MES0+10(B+9(OPT))+9
	ANDA	I,03
	BEQ	1$
2$:	ADDB	I,011			;ADD 9(OPT)
	DECA
	BGT	2$
1$:	ASLB				;MULT BY 10 (INTO A)
	ROLA
	STAB	D,NTEMP
	ASLB
	ROLA
	ASLB
	ROLA
	ADDB	D,NTEMP
	ADCA	I,00
3$:	ADDB	I,011
	STAB	D,NTEMP+1
	ADCA	I,MESSES&177400/400
	STAA	D,NTEMP
	LDX	D,NTEMP
;
;OUTPUT MESSAGE
;
;GET THE LAST TWO BYTES OF THE MESSAGE
;THE SECOND BYTE IS STORED IN THE LAST LOCATION
;THE NEXT CHARACTERS ARE SHIFTED AND STORED
;A '1' IN BIT 7 OF 'A' INDICATED COMPLETION
;
4$:	LDAB	X,MESSES&377	;GET TWO BYTES
	DEX
	LDAA	X,MESSES&377
	PSHB				;BITS 7,6,5 ARE DONT CARE SO STORE
	ASRA
	RORB
	ASRA				;THIRD CHARACTER NOW OK
	RORB
	LSRB
	LSRB
	LSRB				;SECOND CHARACTER OK
	PSHB				;STORE
	PSHA
	DEX
	TSTA				;IF BIT 7=1, DONE
	BPL 	4$
	LDX	D,ADDSAV		;GET RETURN ADDRESS
	JMP	X,0
ENDMES:				;END OF MESSAGE ROUTINE
N3:	LDS	D,SAVE
	LDAA	D,PHPOUT
	STAA	E,PHP
	LDAA	D,PVPOUT
	STAA	E,PVP
	LDAA	D,ROTOUT
	STAA	E,CARROT
	LDAA	D,THSAV			;OUTPUT TAIL
	STAA	E,THPOS
	LDAA	D,TVSAV
	STAA	E,TVPOS
	LDAA	D,TPSAV
	STAA	E,TOUT
	INC	E,FRMCNT
	LDAA	D,TKFG
	STAA	E,TKFGOT		;OUTPUT ALL INFORMATION
	LDAA	D,MODE			;IF IN FRONT AUTO DRIVE, UPDATE
	ANDA	I,203
	CMPA	I,02
	BNE	4$		;PROCESS AUTODRIVE WITH DATA COMPUTED DURING SCAN
	JSR 	SEEK			;CHECK SPACE IN FRONT
	JSR	SEEK			;CHECK RIGHT
	JSR	SEEK			;CHECK LEFT
	RTI
4$:	CMPA	I,01
	BNE	1$
	LDAA	D,VCRPOS		;GET MOLECULE CAR IS ON
	ASLA
	ASLA
	ASLA
	ASLA
	LDAB	D,HCRPOS
	ANDB	I,017
	ABA
	STAA	D,NTEMP+1
	LDAA	I,PLYFLD&177400/400
	STAA	D,NTEMP
	LDX	D,NTEMP
	LDAA	X,PLYFLD&377
	STAA	D,CARMOL
1$:	RTI
	.MACRO	R
	.LIST	MEB
	.BYTE	24,25,26,27,06,05,04,15,16,37,36,35
	.BYTE	30,31,32,33,12,11,10,01,02,23,22,21
	.NLIST	MEB
	.ENDM
	FLAG=0
	.IF	GT,.&377-361
ROTTBL:	R
	FLAG=1
	.ENDC
;THIS GUARANTEES CIRTBL TO BE ALL ON ONE PAGE
CIRTBL: .BYTE	11,11,10,07,04,02,00,00,03,05,07,11,12,12
	.IF	EQ,FLAG
ROTTBL:	R
	.ENDC
TTBL:	.BYTE	10,11,12,13,14,15,36,35,34,33,32,31
	.BYTE	20,21,22,23,24,25,06,05,04,03,02,01
STRTBL:	.BYTE	242,043,010,106,150,145,224,106,242,140,145,321,232,242,140,145
	.MACRO L
	.LIST	MEB
	.BYTE	006,150,212,155,141,207,127,331,011,074,136,150,216,274,331,227
	.BYTE	201,243,327,271,141,063,047,072,027,347,201,210,201,216,130,350
	.BYTE	141,144,274,176,141,216,112,066,030,350,176,145,176,161,250,030
	.NLIST	MEB
	.ENDM
	F=0
	.IF GT,.&377-320
LOCTBL:	L
	F=1
	.ENDC
;THIS GUARTEES SCNTBL TO BE ALL ON ONE PAGE
SCNTBL:	.BYTE	360,01,16,361,20,377,01,20,340,21,017,361	;MUST BE ON
	.BYTE	20,017,02,37,360,21,017,360,40,377,01,37	;ONE PAGE
	.IF EQ,F
LOCTBL:	L
	.ENDC
ATTMAP: .BYTE	001,001,007,007,013,013,010,011
ATTSPC: .BYTE	000,100,200,200,202,202,202,202
RPMTBL:	.BYTE	375,271,207,145,103,272,230,166
	.BYTE	124,230,145,103,227,124,062,020
SPCXPD:	.BYTE	014,022,021,0,0,0,0,0		;OIL, CAR H, CAR
	.BYTE	013,004,005,006,007,010,011,012
DIRTBL: .BYTE	000,364,350,273,216,117,000,117,216,273,350,364
XPLTBL:	.BYTE	000,000,000,000,011,024,031,044,020,026,042,047,022,030,044,060
TMETBL:	.BYTE	050,074,120,144
RATTBL:	.BYTE	005,020,024
MESSES:
;ENGLISH
	.MSG	@@@@@@@@@@@@@@@
	.MSG	@@@@@S0RRY@@@@@
	.MSG	@@@@@S0@S0@@@@@
	.MSG	@@@@@G00D@@@@@@
	.MSG	@@@@@@ACE@@@@@@
	.MSG	@@FUEL@@@@@@@@@
	.MSG	@@SC0RE@@@@@@0@
	.MSG	@B0NUS@F0R@@@0@
	.MSG	@T0P@SC0RE@@@@0
	.MSG	@@PRESS@START@@
;FRENCH:
	.MSG	@@@@DES0LE@@@@@
	.MSG	@@@PASSABLE@@@@
	.MSG	@@@@@BIEN@@@@@@
	.MSG	@@@@@@AS@@@@@@@
	.MSG	@@ESSENCE@@@@@@
	.MSG	@@SC0RE@@@@@@0@
	.MSG	B0NUS@P0UR@@@0@
	.MSG	@SC0RE@MAX.@@@0
	.MSG	@APPUYER@START@
;SPANISH:
	.MSG	@@@L0@SIENT0@@@
	.MSG	@@@@ASI@ASI@@@@
	.MSG	@@@@@BUEN0@@@@@
	.MSG	@@@@@@AS@@@@@@@
	.MSG	@@GAS@@@@@@@@@@
	.MSG	RESULTAD0S@@@0@
	.MSG	@B0N0S@P0R@@@0@
	.MSG	@MAX.SC0RE@@@@0
	.MSG	@@PULSAR@START@
;GERMAN:
	.MSG	@@@@BEDAURE@@@@
	.MSG	@@@@@S0@S0@@@@@
	.MSG	@@@@@@GUT@@@@@@
	.MSG	@@@@@@AS@@@@@@@
	.MSG	@@GAS@@@@@@@@@@
	.MSG	@@TREFFER@@@@0@
	.MSG	@B0NUS@FUR@@@0@
	.MSG	T0P@TREFFER@@@0
	.MSG	@DRUECKE@START@
PWRON:
	.IF LE,OPT-1
	SEI
	.ENDC
	LDS	I,377
	ROR	TSTSW
	BCS 	TEST
	JMP 	NOTEST
TEST:
;RAM TEST--ZERO PAGE & SCREEN RAM
;BAD ZERO PAGE PUTS A 0 ON SCREEN
;BAD SCREEN RAM PUTS A 5 ON SCREEN
;
;IF TEST IS ENTERED WITH THE STEP SWITCH ON, HANG IN THE
;WRITE SECTION.  B7 IS A FLAG FOR THIS & B0-B6 DEBOUNCE
	CLRB
	ROL	STEPSW
	SBCB	I,0		;IF SWITCH SET, B=FF
TSTST:
21$:	STAA	E,WTCHDG		;REFERENCE
	LDX	I,0000		;START OF ZERO PAGE
4$:	LDAA	I,005		;DATA=05-ADDRESS
1$:	STAA	X,0
	INX
	DECA
	CMPA	I,005		;DONE?
	BNE	1$		;BACK AGAIN
	TSTB
	BPL	9$
	ROL	STEPSW
	BCS	20$		;IF C=1, ASRB IS OK
	ADDB	I,200		;C=0, CLEAR B7 & SET C
20$:	RORB
	CMPB	I,^B11111110
	BNE	21$
9$:	TSTB			;IF B E 10 OR 12, DON'T RELOAD
	BGT	3$
	LDAB	I,200		;FLAG FOR TEST
3$:	DEX			;READ IT BACK
	INCA
	CMPA	I,05
	BEQ	2$
	CMPA	X,0
	SEC
	BEQ	3$
2$:	ADCB	I,010		;IF OK, C=0. IF BAD, C=1
	LDX	I,PLYFLD	;SET UP NEXT RAM
	ASLB
	BCS	4$		;IF BIT 7 WAS 1, GO BACK
	LDAA	I,377
	LDX	I,AN+037	;CLEAR ALPHANUMERICS
7$:	STAA 	X,0
	DEX
	CPX	I,AN-1
	BNE	7$
	LDAA	I,005		;SET UP MESSAGE
	LSRB
	LSRB
	BCC	5$
	STAA	E,AN+5		;BAD, PUT OUT MESSAGE
5$:	LSRB
	BCC	6$
	CLR	E,AN+0		;STORE 0
6$:
;
;ROM TEST - CHECKSUMS IN 'CHKSM'.
;
	LDX	I,01		;COUNTER=INDEX+1
	LDS	I,ROM1-1	;START OF ROMS
14$:	LDAA	I,370		;COUNT=-0800
	STAA	D,TEMP
	CLRA
	STAA	D,TEMP+1
12$:	PULB			;GET BYTE & ADD
	ABA
	INC	TEMP+1		;BUMP COUNTER
	BNE	12$
	INC	TEMP
	BNE	12$
	STX	D,TEMP
	LDAB	I,CHKSM&177400/400
	STAB	D,TEMP
	LDX	D,TEMP
	ADDA	X,CHKSM&377	;ADD IN CHECKSUM
	CLR	E,TEMP
	LDX	D,TEMP
	TSTA
	BEQ	13$
	LDAA	D,TEMP+1
	STAA	X,AN		;STORE
13$:	INX
	CPX	I,005		;DONE?
	BNE	14$
15$:
;
;SET-UP FOR DIAGNOSTICS
;
	LDX	I,TSTTBL&177400		;SET UP INDEX FOR JUMP TABLE
	STX	D,TSTCNT
	LDAA	I,377
	STAA	D,STEPDB
;
;LAMPS ON
	LDAA	I,220
	STAA	E,TKFGOT
T0:	LDAA	I,377		;ATTRACT ON
	STAA	E,CSHSND	;CRASH OFF
	STAA	E,TNEOUT	;TONE OFF
	STAA	E,SKDRST	;SKID OFF
	STAA	E,TNEOUT	;TONE OFF
;
;SWITCH TEST - EXOR BITS 0,6 & 7
;
	CLRA
	LDX	I,SWITCH+5	;TOP OF SWITCHES
21$:	EORA	X,0
	DEX
	CPX	I,SWITCH-1
	BNE	21$
	ASLA			;V=BIT 7 EOR BIT 6 FROM BEFORE SHIFT
	BVC	22$
	COMA			;IF V=1, COMPLEMENT BIT 0
22$:	LSRA			;RETURN A
	ABA			;ADD B IN
	LSRA
	BCC	23$		;IF C=0, THEN A=B
	COMB			;SWAP B
	CLR	E,TNEOUT	;TONE ON
23$:	ANDB	I,001
	NEGA			;A=1
	.WAIT
;
;SCREEN MOTION VERTICAL - STEP 1
;
T1:				;BUMP COUNTER
	STAB	E,PVP		;OUTPUT
	.WAIT
;
;SCREEN MOTION HORIZONTAL - STEP 2
;
T2:				;BUMP COUNTER
	STAB	E,PHP		;OUTPUT
	.WAIT
;
;CAR ROTATION -- STEP 3
;
T3:				;BUMP ROTATION
				;CLEAR SCREEN
	LDAA	I,PLYFLD&177400/400	;POINT TO SCREEN
	STAA	D,NTEMP
	LDAA	D,NTEMP+1
	ADDA	I,020		;BUMP COUNTER
	STAA 	D,NTEMP+1
	LDAA	I,020
	LDX	D,NTEMP
1$:	CLR	X,0
	INX
	DECA			;HAVE I DONE 16?
	BNE	1$		;RESTORE 'B'
	PSHB			;SAVE SINGLE IT GETS BLITZED
	JSR	CABROT		;PROCESS INTO A PICTURE
	PULB
	STAA	E,CARROT
	LDAA	I,03		;WAIT 3 FRAMES
	.WAIT
;
;TAIL MOTION HORIZONTAL - STEP 4
;
T4:				;BUMP COUNTER
	STAB	E,THPOS		;STORE TO SCREEN
	CLR	E,TOUT		;A VALID ROTATION
	.WAIT
;
;TAIL MOTION VERTICAL - STEP 5
;
T5:				;BUMP COUNTER
	STAB	E,TVPOS		;STORE TO SCREEN
	LDAA	I,100
	STAA	E,THPOS
	CLRA			;DON'T WAIT
	.WAIT
;
;TAIL ROTATION - STEP 6
;
T6:				;BUMP COUNTER
	PSHB			;SAVE SINGT IT GET BLIZED
	JSR	TLROT		;PROCESS INTO A PICTURE
	PULB
	STAA	E,TOUT
	LDAA	I,03		;WAIT 3 FRAMES
	.WAIT
;
;EXTENDED PLAY SOUND - STEP 7
;
T7:
	STAB	E,TNEOUT	;TOGGLE SOUND
	LDAA	I,017
	.WAIT
;
;BELL SOUND - STEP 8
;
T8:
	LDAA	I,01		;TURN OFF XTD PLAY
	STAA	E,TNEOUT
	LDAA	I,220
	BITB	I,^B0111100	;ON 8, OFF 120
	BNE	1$
	LDAA	I,020		;BELL ON
1$:	STAA	E,TKFGOT
	CLRA
	.WAIT
;
;MOTOR SOUND - STEP 9
;
T9:	LDAA	I,200		;BELL OFF, ATTRACT OFF
	STAA	E,TKFGOT
	TBA
	ORAA	I,360
	STAA	E,MOTSND
	LDAA	I,037
	.WAIT
;
;SIREN SOUND - STEP 10
;
T10:
	TBA
	ORAA	I,017
	STAA	E,MOTSND
	LDAA	I,003
	.WAIT
;
;SCREECH SOUND - STEP 11
;
T11:
	LDAA	I,377		;SIREN & MOTOR LOW
	STAA	E,MOTSND
	CLRA
	BITB	I,020
	BNE	1$
	STAB	E,SKDSND
	.WAIT
1$:	STAB	E,SKDRST
	.WAIT
;
;CRASH SOUND - STEP 12
;
T12:
	STAB	E,SKDRST	;SKID OFF
	STAB	E,CSHSND
	.WAIT
WAIT:					;BUMP COUNTER
;
;WAIT THE NUMBER OF FRAMES SPECIFIED IN A CHECK STEP SWITCH
;RETURN AT THE START OF VBLANK
;
TSTGO:	LDS	I,777		;THIS IS STILL MAPPED INTO THE ZERO PAGE
				;RAM, BUT NOW I CAN IDENTIFY THE TEST MODE
				;BY CHECKING THE STACK
	CLI
	WAI
TSTRTN:	ROL	VBLANK		;ARE WE IN BLANKING?
	BPL	TSTGO
	CLR	PVP		;STOP SCROLLING
	LDX	I,40100		;USE X, NOT A OR B
	STX	E,TVPOS
	ROR	TSTSW		;STILL IN TEST?
	BCS	4$
	JMP	PWRON		;RESET
4$:	ROL	STEPSW
	ROL	STEPDB
	INC	E,STEPDB	;IF STEPDB WAS 01111111,THEN V=1
	BVC	3$
	INC	TSTCNT+1	;BUMP COUNT
	INC	TSTCNT+1
	CLRB
3$:	DEC	E,STEPDB	;RESTORE
	DECA			;ENOUGH FRAMES?
	BPL	TSTGO
	LDX	D,TSTCNT
	LDX	X,TSTTBL&377
	CPX	I,TSTST		;IF STARTING OVER, DON'T BUMP COUNTER
	BEQ	1$
	LDAA	D,TSTCNT+1	;DON'T BUMP IN SELF TEST
	BEQ	1$
	ASRA			;DIVIDE BY 2
	STAA	AN+030		;STORE TEST NUMBER
	ROL	DIHOLD
	BPL	1$
	INCB
1$:	CLRA
	JMP	X,0
TSTTBL:	.WORD	T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TSTST
FILL	=NOTEST+7763-.
	.REPT	FILL
	.BYTE	00
	.ENDR
CHKSM: .BYTE	00			;MAKE CHECKSUM4 EVEN WITH 0 OR 1
	.BYTE	034,074,163,152		;4 CHECKSUMS
	.WORD	IRQ,WAIT,NMI,PWRON
	.IF LE, OPT-1
	.=^H0F7A1
	.WORD NMI
	.=^H0F7A4
	.WORD IRQ
	.ENDC
	.END
                                 